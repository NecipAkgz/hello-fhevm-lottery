{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_24-f257af814f26671261ac3dcd03589a7272de2605",
  "solcVersion": "0.8.24",
  "solcLongVersion": "0.8.24+commit.e11b9ed9",
  "userSourceNameMap": {
    "contracts/ConfidentialLottery.sol": "project/contracts/ConfidentialLottery.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "shanghai",
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/ConfidentialLottery.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\ncontract ConfidentialLottery {\n    mapping(address => uint8) private tickets;\n    address public winner;\n    bool public isDrawn;\n    uint256 public ticketPrice = 0.0001 ether;\n    address[] public participants;\n    address public admin;\n\n    event TicketPurchased(address indexed buyer, uint8 ticket);\n    event WinnerDrawn(address indexed winner, uint8 winningNumber);\n    event PrizeClaimed(address indexed winner, uint256 amount);\n    event LotteryReset(address indexed admin, uint256 timestamp);\n\n    constructor() {\n        admin = msg.sender;\n    }\n\n    // User buys a ticket\n    function buyTicket(uint8 _ticketNumber) external payable {\n        require(msg.value == ticketPrice, \"Incorrect ticket price\");\n        require(!isDrawn, \"Lottery already drawn\");\n        require(\n            _ticketNumber >= 1 && _ticketNumber <= 100,\n            \"Ticket must be between 1-100\"\n        );\n\n        tickets[msg.sender] = _ticketNumber;\n\n        // Add participant to list (to keep winner secret until drawing)\n        bool alreadyParticipated = false;\n        for (uint i = 0; i < participants.length; i++) {\n            if (participants[i] == msg.sender) {\n                alreadyParticipated = true;\n                break;\n            }\n        }\n        if (!alreadyParticipated) {\n            participants.push(msg.sender);\n        }\n\n        emit TicketPurchased(msg.sender, _ticketNumber);\n    }\n\n    // Draw random winner\n    function drawWinner() external {\n        require(!isDrawn, \"Lottery already drawn\");\n        require(participants.length > 0, \"No participants\");\n\n        // Select random winner\n        uint256 randomIndex = uint256(\n            keccak256(\n                abi.encodePacked(\n                    block.timestamp,\n                    block.prevrandao,\n                    participants.length\n                )\n            )\n        ) % participants.length;\n        winner = participants[randomIndex];\n\n        isDrawn = true;\n\n        // Announce winner\n        uint8 winningNumber = tickets[winner];\n        emit WinnerDrawn(winner, winningNumber);\n    }\n\n    // Winner claims prize\n    function claimPrize() external {\n        require(isDrawn, \"Lottery not drawn yet\");\n        require(msg.sender == winner, \"Not the winner\");\n\n        uint256 prize = address(this).balance;\n        require(prize > 0, \"No prize to claim\");\n\n        payable(winner).transfer(prize);\n        emit PrizeClaimed(winner, prize);\n    }\n\n    // Get user's own ticket\n    function getMyTicket() external view returns (uint8) {\n        return tickets[msg.sender];\n    }\n\n    // Check contract balance\n    function getBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n\n    // Get total participant count\n    function getParticipantCount() external view returns (uint256) {\n        return participants.length;\n    }\n\n    // Reset lottery for new round (admin only)\n    function resetLottery() external {\n        require(msg.sender == admin, \"Only admin can reset lottery\");\n        require(isDrawn, \"Lottery not drawn yet\");\n\n        // Reset all state variables\n        isDrawn = false;\n        winner = address(0);\n\n        // Clear participants array\n        delete participants;\n\n        emit LotteryReset(msg.sender, block.timestamp);\n    }\n\n    // Update admin (admin only)\n    function updateAdmin(address _newAdmin) external {\n        require(msg.sender == admin, \"Only admin can update admin\");\n        require(_newAdmin != address(0), \"Invalid admin address\");\n        admin = _newAdmin;\n    }\n}\n"
      }
    }
  }
}