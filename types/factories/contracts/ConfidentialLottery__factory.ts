/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  ConfidentialLottery,
  ConfidentialLotteryInterface,
} from "../../contracts/ConfidentialLottery";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "admin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "LotteryReset",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "PrizeClaimed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "buyer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "ticket",
        type: "uint8",
      },
    ],
    name: "TicketPurchased",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "winningNumber",
        type: "uint8",
      },
    ],
    name: "WinnerDrawn",
    type: "event",
  },
  {
    inputs: [],
    name: "admin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_ticketNumber",
        type: "uint8",
      },
    ],
    name: "buyTicket",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_roundIndex",
        type: "uint256",
      },
    ],
    name: "claimPastPrize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "claimPrize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "drawWinner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMyTicket",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getParticipantCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPastRoundsLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isDrawn",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastDrawTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "participants",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "pastRounds",
    outputs: [
      {
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "prize",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "drawTime",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "claimed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "startNewRound",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "ticketPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "winner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461003257655af3107a4000600255600480546001600160a01b03191633179055610c8890816100378239f35b5f80fdfe608060409080825260049081361015610016575f80fd5b5f3560e01c908163023697f01461090f5750806312065fe0146108f55780631209b1f6146108d757806313cd372e146108b957806335c1d349146108795780633c2bcadc146108535780633f7daf811461082b5780635b0df84e1461068e5780635cbbd6351461067057806370740ac914610523578063ad60572914610505578063b2185bb114610240578063bd85948c14610181578063dfbf53ae1461015a578063f851a440146101345763fd9ba024146100d0575f80fd5b34610130576020366003190112610130573590600654821015610130576100f8608092610b36565b50906001600160a01b038254169160018101549160ff6003600284015493015416928151948552602085015283015215156060820152f35b5f80fd5b509034610130575f366003190112610130576001600160a01b0360209254169051908152f35b8234610130575f366003190112610130576020906001600160a01b03600154169051908152f35b8234610130575f36600319011261013057600174ffffffffffffffffffffffffffffffffffffffffff196001546101bd60ff8260a01c16610c06565b16600155426005556003545f600355806101ff575b82514281527f98ab7e823882180c9f7d9ed464e68d4f8fbe0dde6ac4e6f9ef956dbc424e619260203392a2005b60035f527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b908101905b81811061023657506101d2565b5f81558201610229565b5034610130575f366003190112610130576001549061026560ff8360a01c1615610b6e565b6003549081156104c2576001600160a01b03928382541633148015610497575b156104485784519260208401428152448786015281606086015260608552608085019467ffffffffffffffff95818110878211176104355774010000000000000000000000000000000000000000949374ffffffffffffffffffffffffffffffffffffffffff199389936102fe938c5251902006610aed565b90549060031b1c169116171780600155426005554790855193608085019085821090821117610422579085918752168352602083019081528483019042825260608401935f85526006546801000000000000000081101561040f578060016103699201600655610b36565b9490946103fd57509260209492600392877f097f81796acde1f8350124eadba95449daef1cfdbc53c651caa49b7b1673a0cf989651167fffffffffffffffffffffffff0000000000000000000000000000000000000000845416178355516001830155516002820155019051151560ff801983541691161790556001541692835f525f825260ff815f2054169051908152a2005b5f90634e487b7160e01b82525260245ffd5b604185634e487b7160e01b5f525260245ffd5b604184634e487b7160e01b5f525260245ffd5b604186634e487b7160e01b5f525260245ffd5b845162461bcd60e51b8152602081840152602360248201527f44726177206e6f7420617661696c61626c6520796574206f72206e6f7420616460448201526236b4b760e91b6064820152608490fd5b5060055461025881018091116104af57421015610285565b601183634e487b7160e01b5f525260245ffd5b606490602085519162461bcd60e51b8352820152600f60248201527f4e6f207061727469636970616e747300000000000000000000000000000000006044820152fd5b8234610130575f366003190112610130576020906003549051908152f35b5034610130575f3660031901126101305760015461054660ff8260a01c16610c06565b6001600160a01b038091169182330361062d575f808080478097811561056c8115610bba565b8390610624575bf11561061a5760065490816105b5575b847f95681e512bc0fe659e195e06c283eada494316f3d801213e48e7101af92bf77060208686600154169351908152a2005b5f19820191821161060757509160209160036105f17f95681e512bc0fe659e195e06c283eada494316f3d801213e48e7101af92bf77095610b36565b5001600160ff1982541617905591819350610583565b601190634e487b7160e01b5f525260245ffd5b83513d5f823e3d90fd5b506108fc610573565b606490602085519162461bcd60e51b8352820152600e60248201527f4e6f74207468652077696e6e65720000000000000000000000000000000000006044820152fd5b8234610130575f366003190112610130576020906005549051908152f35b509034610130576020366003190112610130578135916006548310156107e9576001600160a01b036106bf84610b36565b50541633036107a75760ff60036106d585610b36565b50015416610765575060016106e983610b36565b500154809260036107058315926107008415610bba565b610b36565b5001805460ff191660011790555f9061075c575b5f80809381933390f11561075357519081527f95681e512bc0fe659e195e06c283eada494316f3d801213e48e7101af92bf77060203392a2005b513d5f823e3d90fd5b506108fc610719565b6020606492519162461bcd60e51b8352820152601560248201527f5072697a6520616c726561647920636c61696d656400000000000000000000006044820152fd5b6020606492519162461bcd60e51b8352820152601c60248201527f4e6f74207468652077696e6e6572206f66207468697320726f756e64000000006044820152fd5b6020606492519162461bcd60e51b8352820152601360248201527f496e76616c696420726f756e6420696e646578000000000000000000000000006044820152fd5b8234610130575f36600319011261013057602090335f525f825260ff815f2054169051908152f35b8234610130575f3660031901126101305760209060ff60015460a01c1690519015158152f35b5034610130576020366003190112610130573590600354821015610130576001600160a01b036108aa602093610aed565b90549060031b1c169051908152f35b8234610130575f366003190112610130576020906006549051908152f35b8234610130575f366003190112610130576020906002549051908152f35b8234610130575f3660031901126101305751478152602090f35b838360203660031901126101305780359260ff8416809403610130576002543403610aad575060019061094960ff835460a01c1615610b6e565b8184101580610aa2575b15610a5f57335f525f602052825f208460ff198254161790555f905f91600384600354945b858110610a2d575b505050156109d9575b505060035414806109cf575b6109c6575b519081527f544a428276e01bd3774fe90de75fee1b2b8bd04d8e999814d59efaa3b70318e760203392a2005b4260055561099a565b5060055415610995565b68010000000000000000821015610a1a575080826109fa9201600355610aed565b81549060031b906001600160a01b0333831b921b19161790558380610989565b604190634e487b7160e01b5f525260245ffd5b6001600160a01b03610a3e82610aed565b905490851b1c163314610a5357018590610978565b50915050868481610980565b606490602084519162461bcd60e51b8352820152601c60248201527f5469636b6574206d757374206265206265747765656e20312d313030000000006044820152fd5b506064841115610953565b602060649262461bcd60e51b8352820152601660248201527f496e636f7272656374207469636b6574207072696365000000000000000000006044820152fd5b600354811015610b225760035f527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01905f90565b634e487b7160e01b5f52603260045260245ffd5b600654811015610b225760065f5260021b7ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f01905f90565b15610b7557565b60405162461bcd60e51b815260206004820152601560248201527f4c6f747465727920616c726561647920647261776e00000000000000000000006044820152606490fd5b15610bc157565b60405162461bcd60e51b815260206004820152601160248201527f4e6f207072697a6520746f20636c61696d0000000000000000000000000000006044820152606490fd5b15610c0d57565b60405162461bcd60e51b815260206004820152601560248201527f4c6f7474657279206e6f7420647261776e2079657400000000000000000000006044820152606490fdfea26469706673582212203f1c1c5ae01521a28768ce1da43da8087b3e7a87243cef8f22b9f16e1818f57964736f6c63430008180033";

type ConfidentialLotteryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConfidentialLotteryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConfidentialLottery__factory extends ContractFactory {
  constructor(...args: ConfidentialLotteryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ConfidentialLottery & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): ConfidentialLottery__factory {
    return super.connect(runner) as ConfidentialLottery__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConfidentialLotteryInterface {
    return new Interface(_abi) as ConfidentialLotteryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ConfidentialLottery {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as ConfidentialLottery;
  }
}
