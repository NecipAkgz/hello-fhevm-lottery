/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ConfidentialLotteryFHEInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "buyTicket"
      | "claimPastPrize"
      | "claimPrize"
      | "drawPending"
      | "drawWinner"
      | "fulfillRandomIndex"
      | "getBalance"
      | "getMyTicket"
      | "getParticipantCount"
      | "getPastRound"
      | "getPastRoundsLength"
      | "isDrawn"
      | "lastDrawTime"
      | "participants"
      | "pastRounds"
      | "protocolId"
      | "startNewRound"
      | "ticketPrice"
      | "winner"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DecryptionFulfilled"
      | "LotteryReset"
      | "PrizeClaimed"
      | "TicketPurchased"
      | "WinnerDecryptionRequested"
      | "WinnerDrawn"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buyTicket",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPastPrize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPrize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "drawPending",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "drawWinner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillRandomIndex",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMyTicket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getParticipantCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPastRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPastRoundsLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isDrawn", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastDrawTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "participants",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pastRounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startNewRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ticketPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "winner", values?: undefined): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimPastPrize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimPrize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "drawPending",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "drawWinner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fulfillRandomIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMyTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParticipantCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPastRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPastRoundsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isDrawn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastDrawTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "participants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pastRounds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startNewRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "winner", data: BytesLike): Result;
}

export namespace DecryptionFulfilledEvent {
  export type InputTuple = [requestID: BigNumberish];
  export type OutputTuple = [requestID: bigint];
  export interface OutputObject {
    requestID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LotteryResetEvent {
  export type InputTuple = [admin: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [admin: string, timestamp: bigint];
  export interface OutputObject {
    admin: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PrizeClaimedEvent {
  export type InputTuple = [winner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [winner: string, amount: bigint];
  export interface OutputObject {
    winner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TicketPurchasedEvent {
  export type InputTuple = [
    buyer: AddressLike,
    ticketHandle: BytesLike,
    encryptedTicketProof: BytesLike
  ];
  export type OutputTuple = [
    buyer: string,
    ticketHandle: string,
    encryptedTicketProof: string
  ];
  export interface OutputObject {
    buyer: string;
    ticketHandle: string;
    encryptedTicketProof: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WinnerDecryptionRequestedEvent {
  export type InputTuple = [
    requestID: BigNumberish,
    randomIndexHandle: BytesLike
  ];
  export type OutputTuple = [requestID: bigint, randomIndexHandle: string];
  export interface OutputObject {
    requestID: bigint;
    randomIndexHandle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WinnerDrawnEvent {
  export type InputTuple = [
    winner: AddressLike,
    encryptedWinningNumber: BytesLike
  ];
  export type OutputTuple = [winner: string, encryptedWinningNumber: string];
  export interface OutputObject {
    winner: string;
    encryptedWinningNumber: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ConfidentialLotteryFHE extends BaseContract {
  connect(runner?: ContractRunner | null): ConfidentialLotteryFHE;
  waitForDeployment(): Promise<this>;

  interface: ConfidentialLotteryFHEInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  buyTicket: TypedContractMethod<
    [encryptedTicketHandle: BytesLike, encryptedTicketProof: BytesLike],
    [void],
    "payable"
  >;

  claimPastPrize: TypedContractMethod<
    [_roundIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimPrize: TypedContractMethod<[], [void], "nonpayable">;

  drawPending: TypedContractMethod<[], [boolean], "view">;

  drawWinner: TypedContractMethod<[], [void], "nonpayable">;

  fulfillRandomIndex: TypedContractMethod<
    [
      requestID: BigNumberish,
      decryptedResult: BytesLike,
      decryptionProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getBalance: TypedContractMethod<[], [bigint], "view">;

  getMyTicket: TypedContractMethod<[], [string], "view">;

  getParticipantCount: TypedContractMethod<[], [bigint], "view">;

  getPastRound: TypedContractMethod<
    [_roundIndex: BigNumberish],
    [[string, bigint, bigint, boolean]],
    "view"
  >;

  getPastRoundsLength: TypedContractMethod<[], [bigint], "view">;

  isDrawn: TypedContractMethod<[], [boolean], "view">;

  lastDrawTime: TypedContractMethod<[], [bigint], "view">;

  participants: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  pastRounds: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean] & {
        winner: string;
        prize: bigint;
        drawTime: bigint;
        claimed: boolean;
      }
    ],
    "view"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  startNewRound: TypedContractMethod<[], [void], "nonpayable">;

  ticketPrice: TypedContractMethod<[], [bigint], "view">;

  winner: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "buyTicket"
  ): TypedContractMethod<
    [encryptedTicketHandle: BytesLike, encryptedTicketProof: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "claimPastPrize"
  ): TypedContractMethod<[_roundIndex: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimPrize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "drawPending"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "drawWinner"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fulfillRandomIndex"
  ): TypedContractMethod<
    [
      requestID: BigNumberish,
      decryptedResult: BytesLike,
      decryptionProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMyTicket"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getParticipantCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPastRound"
  ): TypedContractMethod<
    [_roundIndex: BigNumberish],
    [[string, bigint, bigint, boolean]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPastRoundsLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isDrawn"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastDrawTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "participants"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "pastRounds"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean] & {
        winner: string;
        prize: bigint;
        drawTime: bigint;
        claimed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "startNewRound"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ticketPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "winner"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "DecryptionFulfilled"
  ): TypedContractEvent<
    DecryptionFulfilledEvent.InputTuple,
    DecryptionFulfilledEvent.OutputTuple,
    DecryptionFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "LotteryReset"
  ): TypedContractEvent<
    LotteryResetEvent.InputTuple,
    LotteryResetEvent.OutputTuple,
    LotteryResetEvent.OutputObject
  >;
  getEvent(
    key: "PrizeClaimed"
  ): TypedContractEvent<
    PrizeClaimedEvent.InputTuple,
    PrizeClaimedEvent.OutputTuple,
    PrizeClaimedEvent.OutputObject
  >;
  getEvent(
    key: "TicketPurchased"
  ): TypedContractEvent<
    TicketPurchasedEvent.InputTuple,
    TicketPurchasedEvent.OutputTuple,
    TicketPurchasedEvent.OutputObject
  >;
  getEvent(
    key: "WinnerDecryptionRequested"
  ): TypedContractEvent<
    WinnerDecryptionRequestedEvent.InputTuple,
    WinnerDecryptionRequestedEvent.OutputTuple,
    WinnerDecryptionRequestedEvent.OutputObject
  >;
  getEvent(
    key: "WinnerDrawn"
  ): TypedContractEvent<
    WinnerDrawnEvent.InputTuple,
    WinnerDrawnEvent.OutputTuple,
    WinnerDrawnEvent.OutputObject
  >;

  filters: {
    "DecryptionFulfilled(uint256)": TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;
    DecryptionFulfilled: TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;

    "LotteryReset(address,uint256)": TypedContractEvent<
      LotteryResetEvent.InputTuple,
      LotteryResetEvent.OutputTuple,
      LotteryResetEvent.OutputObject
    >;
    LotteryReset: TypedContractEvent<
      LotteryResetEvent.InputTuple,
      LotteryResetEvent.OutputTuple,
      LotteryResetEvent.OutputObject
    >;

    "PrizeClaimed(address,uint256)": TypedContractEvent<
      PrizeClaimedEvent.InputTuple,
      PrizeClaimedEvent.OutputTuple,
      PrizeClaimedEvent.OutputObject
    >;
    PrizeClaimed: TypedContractEvent<
      PrizeClaimedEvent.InputTuple,
      PrizeClaimedEvent.OutputTuple,
      PrizeClaimedEvent.OutputObject
    >;

    "TicketPurchased(address,bytes32,bytes)": TypedContractEvent<
      TicketPurchasedEvent.InputTuple,
      TicketPurchasedEvent.OutputTuple,
      TicketPurchasedEvent.OutputObject
    >;
    TicketPurchased: TypedContractEvent<
      TicketPurchasedEvent.InputTuple,
      TicketPurchasedEvent.OutputTuple,
      TicketPurchasedEvent.OutputObject
    >;

    "WinnerDecryptionRequested(uint256,bytes32)": TypedContractEvent<
      WinnerDecryptionRequestedEvent.InputTuple,
      WinnerDecryptionRequestedEvent.OutputTuple,
      WinnerDecryptionRequestedEvent.OutputObject
    >;
    WinnerDecryptionRequested: TypedContractEvent<
      WinnerDecryptionRequestedEvent.InputTuple,
      WinnerDecryptionRequestedEvent.OutputTuple,
      WinnerDecryptionRequestedEvent.OutputObject
    >;

    "WinnerDrawn(address,bytes)": TypedContractEvent<
      WinnerDrawnEvent.InputTuple,
      WinnerDrawnEvent.OutputTuple,
      WinnerDrawnEvent.OutputObject
    >;
    WinnerDrawn: TypedContractEvent<
      WinnerDrawnEvent.InputTuple,
      WinnerDrawnEvent.OutputTuple,
      WinnerDrawnEvent.OutputObject
    >;
  };
}
